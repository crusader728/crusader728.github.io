---
layout: post
title:  Coq tacticals 小结1
date:   2020-05-03 17:25:30 -0700
categories: 
    - Programming
---
# Tacticals (1)
Tacticals is Coq's term for tactics that take other tactics as arguments

+ try: If _T_ is a tactic, then _try T_ is a tactic that is just like _T_ except that, if _T_ fails, try _T_ successfully does nothing at all (rather than failing).
+ ; (simple form): the ; tactical takes two tactics as arguments. The compound tactic _T;T'_ first performs _T_ and then performs _T'_ on each subgoal generated by _T_.
+ ; (general form): If _T, T1, ..., Tn_ are tactics, then _T; [T1 \| T2 \| ... \| Tn]_ is a tactic that first performs _T_ and then performs _T1_ on the first subgoal generated by _T_, performs _T2_ on the second subgoal, etc. So _T;T'_ is just special notation for the case when all of the _Ti_'s are the same tactic; i.e., _T;T'_ is shorthand for: _T; [T' \| T' \| ... \| T']_.
+ repeat: The repeat tactical takes another tactic and keeps applying this tactic until it fails. The tactic _repeat T_ never fails: if the tactic _T_ doesn't apply to the original goal, then repeat still succeeds without changing the original goal (i.e., it repeats zero times).

__Note__: Coq experts often use this "...; try... " idiom after a tactic like induction to take care of many similar cases all at once. 